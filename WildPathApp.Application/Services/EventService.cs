using WildPathApp.Core.Domain.Requests.EventRequests;
using WildPathApp.Core.Domain.CustomExceptions;
using WildPathApp.Application.Helpers.Mappers;
using WildPathApp.Application.Interfaces;
using WildPathApp.Application.DTO;
using WildPathApp.Core.Repositories;

namespace WildPathApp.Application.Services;
public class EventService(IEventRepository eventRepository) : IEventService
{

    #region Get List
    public async Task<List<EventDetailsDto>> GetEventsAsync()
    {
        var (events, eventCategories) = await eventRepository.GetEventsAsync();

        var eventDetailsList = events.Select(
        eventData => EventsMapper.MapEventToEventDetailsDto(eventData, eventCategories)
        ).ToList();

        return eventDetailsList;
    }
    #endregion

    #region Get
    public async Task<EventDetailsDto> GetEventByIdAsync(int id)
    {
        try
        {
            var (eventData, eventCategories) = await eventRepository.GetEventByIdAsync(id);
            return new EventDetailsDto
            {
                Event = eventData,
                Categories = eventCategories
            };
        }

        catch (KeyNotFoundException)
        {
            // Log.Error(ex.Message);

            // Re-throwing an error
            throw;
        }

        catch (Exception ex)
        {
            // Catch any other unexpected exceptions
            // Log.Error(ex.Message);
            throw new ApplicationException("An unexpected error occurred while retrieving the event.", ex);
        }
    }
    #endregion

    #region Add
    public async Task<int> AddEventAsync(AddEventRequest request)
    {
        try
        {
            // Call the repository method to add the event
            var eventId = await eventRepository.AddEventAsync(request);

            // Return the EventId generated by the database
            return eventId;
        }

        catch (DatabaseException)
        {
            throw;
        }
        catch (Exception ex)
        {


            throw new ApplicationException("An error occurred while adding the event.", ex);
        }
    }
    #endregion

    #region Update
    public async Task<int> UpdateEventAsync(UpdateEventRequest request)
    {
        try
        {
            // Call the repository method to update the event
            var eventId = await eventRepository.UpdateEventAsync(request);

            // Return the updated  event id
            return eventId;
        }

        catch (DatabaseException)
        {
            throw;
        }
        catch (Exception ex)
        {
            throw new ApplicationException("An error occurred while updating the event.", ex);
        }
    }
    #endregion

    #region Delete
    public async Task<int> DeleteEventAsync(int id)
    {
        try
        {
            var deletingId = await eventRepository.DeleteEventAsync(id);
            return deletingId;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
    }
    #endregion

}
